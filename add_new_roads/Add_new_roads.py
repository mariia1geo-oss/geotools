# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Add_new_roads
                                 A QGIS plugin
 Add new roads to roads_lat_lon
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-15
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Maria Sarajinskaya
        email                : sarajjmaria@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import psycopg2
#from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication

#from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *

from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtSql import *

from qgis.core import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Add_new_roads_dialog import Add_new_roadsDialog
import os
#os module for surface access to the system


class Add_new_roads:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.iface = iface
        self.dlg = Add_new_roadsDialog()
        # Save reference to the QGIS interface
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Add_new_roads_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
        self.actions = []
        self.list_street = []
        self.name_street = []
        self.max_list_street = 0
        self.menu = self.tr(u'&Add new roads')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.dlg.lineEdit.clear()
        self.dlg.pushButton.clicked.connect(self.clickMethod)

        self.dlg.pushButton_2.clicked.connect(self.clickMethod_2)
        self.dlg.pushButton_3.clicked.connect(self.clickMethod_3)
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Add_new_roads', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Add_new_roads/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&Add new roads'),
                action)
            self.iface.removeToolBarIcon(action)

    def clickMethod_3(self):
        #filling the table with data from the database: street name / number according to the classifier
        from qgis.core import QgsVectorLayer, QgsPoint, QgsProject, QgsGeometry, QgsFeature, QgsDistanceArea, \
            QgsCoordinateReferenceSystem, QgsPointXY, Qgis
        try:
            #database connection
            layer = self.iface.activeLayer()
            provider = layer.dataProvider()
            if provider.name() == 'postgres':
                uri = QgsDataSourceUri(provider.dataSourceUri())
                host_ = uri.host()
                database_ = uri.database()
                port_ = int(uri.port())
                import os
                get_path = str(os.path.dirname(os.path.realpath(__file__)))
                with open(os.path.join(get_path, 'test_218.txt'),
                          'r') as path_con:
                    f = path_con.read()
                conn_param = f.split('\n')
                conn = psycopg2.connect(dbname=str(database_), user=conn_param[0], password=conn_param[1], host=str(host_),
                                        port=str(port_))
                cursor_postgis = conn.cursor()  # to change base
                # Street name table
                list_street = []
                name_street = []
                #self.list_street = list_street

                sql_2 = """select street_id, name from panoramas.street_names"""
                cursor_postgis.execute(sql_2)
                for s in cursor_postgis:
                    a = (str(list(s)[0]))  # getting IDs
                    d = (str(list(s)[1]))  # getting street names
                    name_street.append( str(d).lower())
                    list_street.append([a, d])
                    if int(a) > self.max_list_street:
                        self.max_list_street = int(a)
                self.dlg.tableWidget_2.setColumnCount(2)
                self.dlg.tableWidget_2.setRowCount(len(list_street))
                self.dlg.tableWidget_2.setHorizontalHeaderLabels(
                    ('street_id', 'Название улицы'))
                row = 0
                for tup in list_street:
                    col = 0
                    for item in tup:
                        cellinfo = QTableWidgetItem(item)
                        self.dlg.tableWidget_2.setItem(row, col, cellinfo)
                        col += 1
                    row += 1
                conn.commit()
                cursor_postgis.close()
                conn.close()
                self.list_street = list_street
                self.name_street = name_street
        except:
            provider.name() != none

    def clickMethod_2(self):
        import urllib.request #library for reading url
        from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject, QgsVectorLayer, QgsFeature, QgsGeometry,QgsExpression, QgsFeatureRequest
        layer = self.iface.activeLayer()
        provider = layer.dataProvider()
        if provider.name() == 'postgres':
            uri = QgsDataSourceUri(provider.dataSourceUri())
            host_ = uri.host()
            database_ = uri.database()
            port_ = int(uri.port())
            import os
            get_path = str(os.path.dirname(os.path.realpath(__file__)))
            with open(os.path.join(get_path, 'test_218.txt'),
                      'r') as path_con:
                f = path_con.read()
            conn_param = f.split('\n')
            conn = psycopg2.connect(dbname=str(database_), user=conn_param[0], password=conn_param[1], host=str(host_),
                                    port=str(port_))
            cursor_postgis = conn.cursor()
            xmlData = '<osm-script timeout=\"10\">'
            xmlData += '<union into=\"_\">'
            xmlData += '<bbox-query e=\"maxlong\" n=\"maxlat\" s=\"minlat\" w=\"minlong\"/>'
            xmlData += '<recurse type=\"up\"/><recurse type=\"down\"/>'
            xmlData += '</union><print limit=\"\" mode=\"meta\" order=\"id\"/>'
            xmlData += '</osm-script>'

            osmUrl = 'http://overpass-api.de/api/interpreter'
            #osmUrl = 'http://z.overpass-api.de/api/interpreter'
            #osmUrl = 'https://overpass.kumi.systems/api/interpreter'
            #osmUrl = 'http://lz4.overpass-api.de/api/interpreter'
            coordinates = self.iface.mapCanvas().extent()
            # Defining the crs from src and destiny
            epsg = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
            crsSrc = QgsCoordinateReferenceSystem(epsg)
            crsDest = QgsCoordinateReferenceSystem(4326)
            # Creating a transformer
            coordinateTransformer = QgsCoordinateTransform(crsSrc, crsDest, QgsProject.instance())
            # Transforming the points
            coordinates_Transf = coordinateTransformer.transform(coordinates)
            xmlData = xmlData.replace('maxlong', str(round(coordinates_Transf.xMaximum(), 6)))
            xmlData = xmlData.replace('minlong', str(round(coordinates_Transf.xMinimum(), 6)))
            xmlData = xmlData.replace('minlat', str(round(coordinates_Transf.yMinimum(), 6)))
            xmlData = xmlData.replace('maxlat', str(round(coordinates_Transf.yMaximum(), 6)))
            xmlData = xmlData.encode('utf-8')
            #self.dlg.listWidget.addItems([str(xmlData)])
            req = urllib.request.Request(url=osmUrl, data=xmlData, headers={'Content-Type': 'application/xml'})
            response = urllib.request.urlopen(req)

            localfile = open(r'C:\Users\saraginskayam\_WORK\test.osm', 'wb')
            localfile.write(response.read())
            localfile.close()
            name_layer = 'osm_all_lines'
            act_layer = QgsVectorLayer(r'C:\Users\saraginskayam\_WORK\test.osm' + '|layername=lines', name_layer, "ogr")
            act_layer.dataProvider().setEncoding('utf-8')
            QgsProject.instance().addMapLayer(act_layer)
            self.iface.setActiveLayer(act_layer)
            layer = self.iface.activeLayer()
            expression = str(" \"highway\" is not null")
            expr = QgsExpression(expression)
            it = layer.getFeatures(QgsFeatureRequest(expr))
            vl = QgsVectorLayer('LineString?crs=epsg:4326&field=id:integer&field=street_id:integer&field=temporary:integer&field=special_use:integer&field=exclude:integer&field=moduser:integer&field=objid:integer', "OSM", "memory")
            pr = vl.dataProvider()
            pr.setEncoding('utf-8')
            feature_list = []
            for element in it:
                attr_street = []
                feat = QgsFeature(vl.fields())
                feat.setGeometry(element.geometry())
                attrs = element.attributes()# get the feature's attributes from osm layer
                street_name_osm = str(attrs[1]).lower()
                if street_name_osm in self.name_street:
                    index_street = self.name_street.index(street_name_osm)
                    attr_street.append(self.list_street[index_street])
                elif street_name_osm != "null":
                    if street_name_osm not in self.name_street:
                        self.name_street.append(street_name_osm)
                        test = []
                        test.append(street_name_osm)
                        self.dlg.listWidget.addItems([str(test)])
                feature_list.append(feat)
            pr.addFeatures(feature_list)
            vl.commitChanges()
            QgsProject.instance().addMapLayer(vl)
            QgsProject.instance().removeMapLayer(act_layer)
            conn.commit()
            cursor_postgis.close()
            conn.close()

    def clickMethod(self):
        from qgis.core import QgsVectorLayer, QgsPoint, QgsProject, QgsGeometry, QgsFeature, QgsDistanceArea, \
            QgsCoordinateReferenceSystem, QgsPointXY, Qgis
        layer = self.iface.activeLayer()
        provider = layer.dataProvider()
        if provider.name() == 'postgres':
            uri = QgsDataSourceUri(provider.dataSourceUri())
            host_ = uri.host()
            database_ = uri.database()
            port_ = int(uri.port())
            import os
            get_path = str(os.path.dirname(os.path.realpath(__file__)))
            with open(os.path.join(get_path, 'test_218.txt'),
                      'r') as path_con:
                f = path_con.read()
            conn_param = f.split('\n')
            conn = psycopg2.connect(dbname=str(database_), user=conn_param[0], password=conn_param[1], host=str(host_), port=str(port_))
            cursor_postgis = conn.cursor()
            test = '%' + (self.dlg.lineEdit.text()).lower() + '%'
            list_street = []
            sql_2 = """select street_id, name from panoramas.street_names where lower(name) like %s"""
            params = [test]
            cursor_postgis.execute(sql_2, params)
            for s in cursor_postgis:
                a = (str(list(s)[0]))
                d = (str(list(s)[1]))
                list_street.append([a, d])
            self.dlg.tableWidget_2.setColumnCount(2)
            self.dlg.tableWidget_2.setRowCount(len(list_street))
            self.dlg.tableWidget_2.setHorizontalHeaderLabels(
                ('street_id', 'Название улицы'))
            row = 0
            for tup in list_street:
                col = 0
                for item in tup:
                    cellinfo = QTableWidgetItem(item)
                    self.dlg.tableWidget_2.setItem(row, col, cellinfo)
                    col = col + 1
                row += 1
            self.dlg.lineEdit.clear()

    def run(self):
        """Run method that performs all the real work"""
        from qgis.core import QgsVectorLayer, QgsPoint, QgsProject, QgsGeometry, QgsFeature, QgsDistanceArea, \
            QgsCoordinateReferenceSystem, QgsPointXY, Qgis
        import os
        layer = self.iface.activeLayer()
        provider = layer.dataProvider()
        if provider.name() == 'postgres':
            uri = QgsDataSourceUri(provider.dataSourceUri())
            # set the parameters needed for the connection
            host_ = uri.host()
            database_ = uri.database()
            port_ = int(uri.port())
            la = self.iface.activeLayer()
            lyr = la.selectedFeatures()
            get_path = str(os.path.dirname(os.path.realpath(__file__)))
            with open(os.path.join(get_path, 'test_218.txt'),
                        'r') as path_con:
                f = path_con.read()
            conn_param = f.split('\n')
            conn = psycopg2.connect(dbname=str(database_), user=conn_param[0], password=conn_param[1], host=str(host_), port=str(port_))
            cursor_postgis = conn.cursor()
            list_attrib = []
            for el in lyr:
                geom_b = el.geometry()
                x = geom_b.asWkt()
                street_id = str(el[0])
                special_use = str(el[2])
                x1 = x + '#'
                x2 = x1 + street_id + ','
                x3 = x2 + special_use
                list_attrib.append(x3)

            name = []
            sql_1 = """select name from panoramas.operators"""
            cursor_postgis.execute(sql_1)
            for row in cursor_postgis:
                name.append(
                    str(list(row)[0]))
            self.dlg.comboBox.clear()
            self.dlg.comboBox.addItems(name)
            # show the dialog
            self.dlg.show()
            # Run the dialog event loop
            result = self.dlg.exec_()
            # See if OK was pressed
            if result:
                moduser = self.dlg.comboBox.currentText()
                cursor_postgis.callproc('panoramas.drawlines_to_segments', (list_attrib, moduser))
                conn.commit()
                cursor_postgis.close()
                conn.close()





